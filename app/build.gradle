apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.jakewharton.hugo'

import java.util.regex.Matcher
import java.util.regex.Pattern

def getVersionName() {
    return rootProject.ext.android.versionName
}

def getVersionCode() {
    return rootProject.ext.android.versionCode
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return ""
    }
}

def isDeveloper() {
    String curFlavor = getCurrentFlavor()
    return curFlavor != null && curFlavor.contains("developer")
}

def isDebug() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern
    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(Developer|Production)(\\w+)")
    else
        pattern = Pattern.compile("generate(Developer|Production)(\\w+)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()) {
        return matcher.group(0).toLowerCase().contains("debug")
    } else {
        println "NO MATCH FOUND"
        return false
    }
}


def getMergeVersion() {
    int versionCode = getVersionCode()
    String versionName = getVersionName()
    println "========= versionName : " + versionName + "======"
    try {

        String newVersionName = versionName.replaceAll("[^(0-9)]", "")
//        int mergeVersion
        if (isDeveloper()) {
            def debugBuildType = 1
            if(!isDebug()){
                debugBuildType = 2
            }
            int publishVersionCode = (newVersionName.toInteger() * 10 + debugBuildType) * 100 + versionCode
            println "========= mergeVersion = " + publishVersionCode + " ======isDeveloper = " + isDeveloper() + ", isDebug = " + isDebug() + " ========= "
            return publishVersionCode
        } else {
            def releaseBuildType = 3
            if (!isDebug()) {
                releaseBuildType = 4
            }
            int publishVersionCode = (newVersionName.toInteger() * 10 + releaseBuildType) * 1000 + versionCode
            println "========= mergeVersion = " + publishVersionCode + " ======isDeveloper = " + isDeveloper() + ", isDebug = " + isDebug() + " ========= "
            return publishVersionCode
        }
    } catch (Exception e) {
        println "========= Exception mergeVersion :=========" + e.message
        return getVersionCode()
    }


}


android {

    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion


    flavorDimensions "mode"


    productFlavors {
        developer {
            minSdkVersion 21
        }
        production {
            minSdkVersion rootProject.ext.android.minSdkVersion
        }
    }

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode getMergeVersion()
        versionName rootProject.ext.android.versionName

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/main/aidl']
        }
    }


    packagingOptions {
        exclude 'META-INF/rxjava.properties'
        // ... and any other excludes Go here
    }

}

dependencies {
    //尽量放到framework的module，保证所有lib都挂载
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':framework')
    compile project(':cloudlib1')
    compile project(':dbmodule')
    testCompile 'junit:junit:4.12'
    //For DeepLink
    annotationProcessor 'com.airbnb:deeplinkdispatch-processor:3.0.0-rc3'
    compile 'com.airbnb:deeplinkdispatch:3.0.0-rc3'
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    annotationProcessor 'com.alibaba:arouter-compiler:1.1.2.1'
    compile project(':rescue')
//    compile project(':simpledb')
//    debugCompile project(path: ':simpledb', configuration: 'debug')
//    releaseCompile project(path: ':simpledb', configuration: 'release')
}
